#!/usr/bin/env python3
"""Verify that the lint rules are documented in the website."""

# pylint: disable=invalid-name

import os
import pathlib
import re
import subprocess
import sys
import textwrap

from gcpdiag import lint

WEBSITE_RULES_DIR = 'website/content/en/rules'

PRODUCTS = {
    'gce':
        '[Compute Engine](https://cloud.google.com/compute)',
    'gcf':
        '[Cloud Functions](https://cloud.google.com/functions)',
    'gke':
        '[Google Kubernetes Engine](https://cloud.google.com/kubernetes-engine)',
    'iam':
        '[Identity and Access Management (IAM)](https://cloud.google.com/iam)',
}

RULE_CLASSES = {
    'BP': 'Best practice, opinionated recommendation',
    'ERR': 'Something that is very likely to be wrong',
    'WARN': 'Something that is possibly wrong',
    'SEC': 'Potential security issue',
}


def usage():
  print('usage: gcpdiag-website-rules FILE1.py FILE2.py', file=sys.stderr)
  sys.exit(1)


def gen_rule_page(rule, rule_page_path):
  # Create product directory
  try:
    class_dir = pathlib.Path(f'{WEBSITE_RULES_DIR}/{rule.product}')
    class_dir.mkdir()
    with open(class_dir / '_index.md', 'w', encoding='utf-8') as f:
      print(textwrap.dedent(f'''\
          ---
          title: "{rule.product.upper()}"
          linkTitle: "{rule.product}"
          type: docs
          ---
          '''),
            file=f)
  except FileExistsError:
    pass

  # Create rule class directory
  try:
    class_dir = pathlib.Path(
        f'{WEBSITE_RULES_DIR}/{rule.product}/{rule.rule_class}')
    class_dir.mkdir()
  except FileExistsError:
    pass

  with open(rule_page_path, 'w', encoding='utf-8') as f:
    print(textwrap.dedent(f'''\
    ---
    title: "{rule.product}/{rule.rule_class}/{rule.rule_id}"
    linkTitle: "{rule.rule_class}/{rule.rule_id}"
    weight: 1
    type: docs
    description: >
      {rule.short_desc}
    ---

    **Product**: {PRODUCTS[rule.product]}\\
    **Rule class**: {rule.rule_class} - {RULE_CLASSES[str(rule.rule_class)]}

    ### Description
    '''),
          file=f)
    print(rule.long_desc, file=f)
    print(textwrap.dedent('''\

    ### Remediation

    ### Further information'''),
          file=f)


def check_rule(rule):
  rule_page_path = f'{WEBSITE_RULES_DIR}/{rule.product}/{rule.rule_class}/{rule.rule_id}.md'
  # check that rule page exists and is staged
  lsfiles = subprocess.run(['git', 'ls-files', '-s', rule_page_path],
                           stdout=subprocess.PIPE,
                           check=False)
  if len(lsfiles.stdout) > 0:
    return True
  elif os.path.exists(rule_page_path):
    print(f'rule page not staged: {rule_page_path}', file=sys.stderr)
    return False
  else:
    print(f'generated initial rule page: {rule_page_path}', file=sys.stderr)
    gen_rule_page(rule, rule_page_path)
    return False


def check(files):
  rules_repo = lint.LintRuleRepository()
  seen_rule_ids = {}
  exit_fail = False
  for arg in sorted(files):
    # only process gcpdiag lint rules
    m = re.match(r'gcpdiag/lint/([^/]+)/(.*)\.py', arg)
    if not m:
      continue
    rule_dir = m.group(1)
    rule_basename = m.group(2)
    rule_module_name = f'gcpdiag.lint.{rule_dir}.{rule_basename}'
    try:
      rule = rules_repo.get_rule_by_module_name(rule_module_name)
      # Verify that the rule id is unique
      if str(rule) in seen_rule_ids:
        print(f'ERROR: rule id {str(rule)} is not unique!', file=sys.stderr)
        exit_fail = True
      seen_rule_ids[str(rule)] = 1
      if not check_rule(rule):
        exit_fail = True
    except lint.NotLintRule:
      continue
  if exit_fail:
    sys.exit(1)


if __name__ == '__main__':
  if len(sys.argv) < 2:
    usage()
  check(sys.argv[1:])
